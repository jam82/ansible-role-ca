---
# role: ansible-role-ca
# file: tasks/init.yml

- name: "Create CA directories"
  file:
    path: "{{ item.dir }}"
    state: directory
    owner: root
    group: root
    mode: "{{ item.mode }}"
  loop: "{{ ca_init_dirs }}"
  tags: init-dirs

- name: "Create CA files"
  file:
    path: "{{ item.file }}"
    state: touch
    owner: root
    group: root
    mode: "{{ item.mode }}"
    access_time: preserve
    modification_time: preserve
  loop: "{{ ca_init_files }}"
  tags: init-files

- name: "Initialize configuration files"
  template:
    src: "etc/{{ item.path }}-ca.conf.j2"
    dest: "{{ ca_base_dir }}/ca/etc/{{ item.path }}-ca.conf"
    owner: root
    group: root
    mode: '600'
  loop: "{{ ca_init_names }}"
  tags: init-conf

- name: "Generate password files"
  shell: |
    pwgen -s 64 1 > ca/{{ item.path }}-ca/pwd/{{ item.path }}-ca.pwd && \
    chmod 600 ca/{{ item.path }}-ca/pwd/{{ item.path }}-ca.pwd
  args:
    chdir: "{{ ca_base_dir }}/"
    creates: "{{ ca_base_dir }}/ca/{{ item.path }}-ca/pwd/{{ item.path }}-ca.pwd"
  loop: "{{ ca_init_names }}"
  tags: init-pwds

- name: "Create CA CSRs and Keys"
  shell: |
    openssl req -batch -new \
      -config ca/etc/{{ item.path }}-ca.conf \
      -out ca/csr/{{ item.path }}-ca.csr \
      -keyout ca/{{ item.path }}-ca/private/{{ item.path }}-ca.key \
      -passout file:ca/{{ item.path }}-ca/pwd/{{ item.path }}-ca.pwd && \
    chmod 600 ca/{{ item.path }}-ca/private/{{ item.path }}-ca.key
  args:
    chdir: "{{ ca_base_dir }}/"
    creates: "{{ ca_base_dir }}/ca/{{ item.path }}-ca/private/{{ item.path }}-ca.key"
  loop: "{{ ca_init_names }}"
  tags: init-keys

- name: "Create CA Certificates and sign"
  shell: |
    openssl ca -batch -create_serial {{ item.param }} \
      -config ca/etc/{{ item.sign }}-ca.conf \
      -in ca/csr/{{ item.path }}-ca.csr \
      -out ca/{{ item.path }}-ca.crt \
      -extensions {{ item.ext }} \
      -passin file:ca/{{ item.sign }}-ca/pwd/{{ item.sign }}-ca.pwd
  args:
    chdir: "{{ ca_base_dir }}/"
    creates: "{{ ca_base_dir }}/ca/{{ item.path }}-ca.crt"
  loop: "{{ ca_init_names }}"
  tags: init-certs

- name: "Gernerate initial CRLs"
  shell: |
    echo 01 > ca/{{ item.path }}-ca/db/{{ item.path }}-ca.crl.srl && \
    openssl ca -batch -gencrl \
      -config ca/etc/{{ item.path }}-ca.conf \
      -out crl/{{ item.path }}-ca.crl \
      -passin file:ca/{{ item.path }}-ca/pwd/{{ item.path }}-ca.pwd
  args:
    chdir: "{{ ca_base_dir }}/"
    creates: "{{ ca_base_dir }}/crl/{{ item.path }}-ca.crl"
  loop: "{{ ca_init_names }}"
  tags: init-crls

- name: "Export certificates in DER and PEM format"
  shell: |
    openssl x509 -in ca/{{ item.path }}-ca.crt -out ca/{{ item.path }}-ca.pem -outform PEM
    openssl x509 -in ca/{{ item.path }}-ca.crt -out ca/{{ item.path }}-ca.cer -outform DER
  args:
    chdir: "{{ ca_base_dir }}/"
    creates: "{{ ca_base_dir }}/ca/{{ item.path }}-ca.cer"
  loop: "{{ ca_init_names }}"
  tags: init-export

- name: "Create certificate chains"
  shell: |
    cat ca/{{ item.path }}-ca.pem ca/{{ item.sign }}-ca.pem > ca/{{ item.path }}-ca-chain.pem
    openssl crl2pkcs7 -nocrl \
    -certfile ca/{{ item.path }}-ca-chain.pem -inform PEM \
    -out ca/{{ item.path }}-ca-chain.p7c \
    -outform DER
  args:
    chdir: "{{ ca_base_dir }}/"
    creates: "{{ ca_base_dir }}/ca/{{ item.path }}-ca-chain.p7c"
  loop: "{{ ca_init_names }}"
  when: item.path != item.sign
  tags: init-chain

- name: "Generate {{ ca_default_bits }} bits Diffie-Hellman parameters file (takes a long time)"
  openssl_dhparam:
    path: /etc/ssl/dhparams.pem
    size: "{{ ca_default_bits }}"
    state: present
  when: ca_create_dhparams | bool
  tags: dhparams

- name: Set fact for CA List
  set_fact:
    ca_list: |
      {% set ca_names = [] -%}
      {% for ca_item in ca_init_names -%}
        {% set ca_dummy = ca_names.append(ca_item.path) -%}
      {%- endfor %}
      {{ ca_names }}

- name: "Create wrapper script /usr/local/bin/{{ ca_dir }}-ca"
  template:
    src: "usr/local/bin/ca.j2"
    dest: "/usr/local/bin/{{ ca_dir }}-ca"
    owner: root
    group: root
    mode: '700'
  tags: init-wrapper

- name: Enable cron jobs for generating CRLs
  cron:
    name: "{{ item.name }}"
    day: "{{ item.day }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    job: "{{ item.job }}"
    user: root
    cron_file: "{{ ca_dir }}-crl"
    state: "{{ item.state }}"
  loop: "{{ ca_cron_jobs }}"
  tags: cron-crl

- name: Add CA certificates to trusted ca store
  copy:
    src: "{{ ca_base_dir }}/ca/{{ item.path }}-ca.crt"
    dest: "{{ ca_trusted_path }}/{{ ca_dir }}-{{ item.path }}-ca.crt"
    remote_src: yes
  loop: "{{ ca_init_names }}"
  notify: Update trusted CA certs
  tags: update-ca-store
